{"version":3,"sources":["components/user/dashboard/DateTime.js","components/user/dashboard/WorkLocation.js","components/user/dashboard/SetWorkLocation.js","components/user/dashboard/CheckInOut.js","views/role/user/dashboard/Dashboard.js"],"names":["DateTime","useState","clockState","setClockState","dateState","setDateState","useEffect","days","months","interval","setInterval","dateTime","Date","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateFormat","time","toLocaleTimeString","hours","slice","minutes","period","toLocaleLowerCase","timeFormat","clearInterval","className","style","fontWeight","DefaultIcon","L","icon","iconSize","iconAnchor","popupAnchor","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","WorkLocation","workLocation","userLocation","borderRadius","boxShadow","padding","MapContainer","center","zoom","minZoom","maxZoom","scrollWheelZoom","height","width","TileLayer","attribution","url","Circle","pathOptions","fillColor","radius","position","DraggableMarker","setWorkLocation","draggable","setDraggable","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","toggleDraggable","useCallback","d","map","useMapEvents","click","locate","locationfound","e","latlng","flyTo","ref","Popup","minWidth","cursor","onClick","SetWorkLocation","isLocationSet","setIsLocationSet","setMap","indonesiaLocation","modalLocation","setModalLocation","show","size","listStyleType","margin","faInfoCircle","whenCreated","color","CheckInOut","isCheckedIn","isCheckedOut","checkInOutHandler","modal","setModal","modalAttribute","setModalAttribute","buttonHandler","message","colorMessage","button","md","block","shape","disabled","faSignInAlt","faSignOutAlt","onClose","Dashboard","setIsCheckedIn","setIsCheckedOut","error","setError","lat","lng","setUserLocation","getUserLocation","navigator","geolocation","Promise","res","rej","getCurrentPosition","alert","calculateDistance","lat1","lon1","lat2","lon2","p","c","Math","cos","a","asin","sqrt","window","dispatchEvent","Event","then","coords","latitude","longitude","catch","xs","sm","userLat","userLng","workLat","workLng","distance","parseInt"],"mappings":"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","file":"static/js/20.c5102619.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst DateTime = () => {\n  const [clockState, setClockState] = useState(\"\");\n  const [dateState, setDateState] = useState(\"\");\n\n  useEffect(() => {\n    const days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    const months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    const interval = setInterval(() => {\n      const dateTime = new Date();\n\n      // convert dateTime into date string -> day, date month year\n      const day = days[dateTime.getDay()];\n      const date = dateTime.getDate();\n      const month = months[dateTime.getMonth()];\n      const year = dateTime.getFullYear();\n      const dateFormat = `${day}, ${date} ${month} ${year}`;\n      setDateState(dateFormat);\n\n      // convert dateTime into time string -> hours:minutes am/pm\n      const time = dateTime.toLocaleTimeString();\n      const hours = (\"0\" + time.slice(0, -9)).slice(-2);\n      const minutes = time.slice(-8, -6);\n      const period = time.slice(-2).toLocaleLowerCase();\n      const timeFormat = `${hours}:${minutes} ${period}`;\n      setClockState(timeFormat);\n    }, 1000);\n\n    // clear the timer when the component unmount\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <>\n      <h5 className=\"mt-3 mb-4\">{dateState}</h5>\n      <h4 className=\"display-3\" style={{ fontWeight: \"600\" }}>\n        {clockState}\n      </h4>\n    </>\n  );\n};\n\nexport default DateTime;\n","import React from \"react\";\n\n// coreui\nimport { CCard, CCardBody } from \"@coreui/react\";\n\n// map\nimport { MapContainer, TileLayer, Marker, Circle } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\n\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\n\n// Fix the marker icon that doesnt show up\nlet DefaultIcon = L.icon({\n  iconSize: [25, 41],\n  iconAnchor: [10, 41],\n  popupAnchor: [2, -40],\n  iconUrl: icon,\n  shadowUrl: iconShadow\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nconst WorkLocation = ({ workLocation, userLocation }) => {\n  return (\n    <CCard\n      style={{\n        borderRadius: \"10px\",\n        boxShadow:\n          \"0 4px 4px 0 rgba(0, 0, 0, 0.2), 0 4px 4px 0 rgba(0, 0, 0, 0.19)\"\n      }}\n    >\n      <CCardBody className=\"p-1\" style={{ padding: 0 }}>\n        <MapContainer\n          center={workLocation}\n          zoom={16}\n          minZoom={0}\n          maxZoom={20}\n          scrollWheelZoom={false}\n          style={{ height: \"50vh\", width: \"100%\" }}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Circle\n            center={workLocation}\n            pathOptions={{ fillColor: \"blue\" }}\n            radius={100}\n          />\n          {userLocation ? (\n            <Marker position={userLocation} icon={DefaultIcon}></Marker>\n          ) : (\n            <></>\n          )}\n        </MapContainer>\n      </CCardBody>\n    </CCard>\n  );\n};\n\nexport default WorkLocation;\n","import React, { useState, useRef, useCallback, useMemo } from \"react\";\n\n// coreui\nimport {\n  CButton,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter\n} from \"@coreui/react\";\n\n// font awesome\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n\n// map\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  useMapEvents\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\n\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\n\n// Fix the marker icon that doesnt show up\nlet DefaultIcon = L.icon({\n  iconSize: [25, 41],\n  iconAnchor: [10, 41],\n  popupAnchor: [2, -40],\n  iconUrl: icon,\n  shadowUrl: iconShadow\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\n// handler get the location based on the marker\n// the marker also can be draggable\nfunction DraggableMarker({ workLocation, setWorkLocation }) {\n  const zoomLevel = 16;\n\n  const [draggable, setDraggable] = useState(false);\n  const markerRef = useRef(null);\n  const eventHandlers = useMemo(\n    () => ({\n      dragend() {\n        const marker = markerRef.current;\n        if (marker != null) {\n          setWorkLocation(marker.getLatLng());\n        }\n      }\n    }),\n    [setWorkLocation]\n  );\n  const toggleDraggable = useCallback(() => {\n    setDraggable(d => !d);\n  }, []);\n\n  // handler get and zoom location\n  const map = useMapEvents({\n    click() {\n      map.locate();\n    },\n    locationfound(e) {\n      setWorkLocation(e.latlng);\n      map.flyTo(e.latlng, zoomLevel);\n    }\n  });\n\n  return (\n    <Marker\n      draggable={draggable}\n      eventHandlers={eventHandlers}\n      position={workLocation}\n      ref={markerRef}\n    >\n      <Popup minWidth={90}>\n        <span style={{ cursor: \"pointer\" }} onClick={toggleDraggable}>\n          {draggable\n            ? \"Marker is draggable\"\n            : \"Click here to make marker draggable\"}\n        </span>\n      </Popup>\n    </Marker>\n  );\n}\n\nconst SetWorkLocation = ({\n  isLocationSet,\n  setIsLocationSet,\n  workLocation,\n  setWorkLocation,\n  setMap,\n  indonesiaLocation\n}) => {\n  const [modalLocation, setModalLocation] = useState(!isLocationSet);\n\n  return (\n    <>\n      <CModal show={modalLocation} size=\"lg\">\n        <CModalHeader>\n          <CModalTitle>Set Working Location</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <ul\n            className=\"mb-2 ml-1\"\n            style={{ listStyleType: \"none\", padding: 0, margin: 0 }}\n          >\n            <li className=\"mt-1 text-primary\">\n              <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\n              Click anywhere to get your location\n            </li>\n            <li className=\"mt-1 text-primary\">\n              <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\n              Click the marker to make it draggable\n            </li>\n          </ul>\n          <MapContainer\n            whenCreated={setMap}\n            center={indonesiaLocation}\n            zoom={4}\n            scrollWheelZoom={false}\n            style={{ height: \"50vh\", width: \"100%\" }}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <DraggableMarker\n              workLocation={workLocation}\n              setWorkLocation={setWorkLocation}\n            />\n          </MapContainer>\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"dark\"\n            onClick={() => {\n              setModalLocation(!modalLocation);\n              setIsLocationSet(!isLocationSet);\n            }}\n          >\n            Set Location\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n};\n\nexport default SetWorkLocation;\n","import React, { useState } from \"react\";\n\n// coreui\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CModal,\n  CModalBody,\n  CModalFooter\n} from \"@coreui/react\";\n\n// font awesome\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignInAlt, faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst CheckInOut = ({\n  isCheckedIn,\n  isLocationSet,\n  isCheckedOut,\n  checkInOutHandler\n}) => {\n  const [modal, setModal] = useState(false);\n  const [modalAttribute, setModalAttribute] = useState({});\n\n  const buttonHandler = (color, message, colorMessage, button) => {\n    setModal(!modal);\n    setModalAttribute({\n      color,\n      message,\n      colorMessage,\n      button\n    });\n  };\n\n  const modalButtonHandler = () => {\n    setModal(!modal);\n    checkInOutHandler();\n  };\n\n  return (\n    <>\n      <CRow className=\"justify-content-center mt-2\">\n        <CCol md=\"4\" className=\"mt-2\">\n          <CButton\n            block\n            shape=\"pill\"\n            className=\"py-2\"\n            color=\"primary\"\n            disabled={isCheckedIn || !isLocationSet}\n            onClick={() => {\n              buttonHandler(\n                \"primary\",\n                \"Sure to check in?\",\n                \"text-primary text-center\",\n                \"Check in\"\n              );\n            }}\n          >\n            <FontAwesomeIcon icon={faSignInAlt} />\n            &nbsp;Check In\n          </CButton>\n        </CCol>\n        <CCol md=\"4\" className=\"mt-2\">\n          <CButton\n            block\n            shape=\"pill\"\n            disabled={isCheckedOut}\n            className=\"py-2\"\n            color=\"danger\"\n            onClick={() => {\n              buttonHandler(\n                \"danger\",\n                \"Sure to check out?\",\n                \"text-danger text-center\",\n                \"Check out\"\n              );\n            }}\n          >\n            Check Out &nbsp;\n            <FontAwesomeIcon icon={faSignOutAlt} />\n          </CButton>\n        </CCol>\n      </CRow>\n      {/* Modal */}\n      <CModal\n        size=\"sm\"\n        show={modal}\n        onClose={() => setModal(!modal)}\n        color={modalAttribute.color}\n      >\n        <CModalBody className={modalAttribute.colorMessage}>\n          <h4>{modalAttribute.message}</h4>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color={modalAttribute.color} onClick={modalButtonHandler}>\n            {modalAttribute.button}\n          </CButton>{\" \"}\n          <CButton color=\"secondary\" onClick={() => setModal(!modal)}>\n            Cancel\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n};\n\nexport default CheckInOut;\n","import React, { useState, useEffect } from \"react\";\n\n// coreui\nimport { CCard, CCardBody, CCol, CRow } from \"@coreui/react\";\n\n// components\nimport DateTime from \"../../../../components/user/dashboard/DateTime\";\nimport WorkLocation from \"../../../../components/user/dashboard/WorkLocation\";\nimport SetWorkLocation from \"../../../../components/user/dashboard/SetWorkLocation\";\nimport CheckInOut from \"../../../../components/user/dashboard/CheckInOut\";\n\nconst Dashboard = () => {\n  // checkin-out\n  const [isCheckedIn, setIsCheckedIn] = useState(false);\n  const [isCheckedOut, setIsCheckedOut] = useState(true);\n\n  // error\n  const [error, setError] = useState(null);\n\n  // set location\n  const [isLocationSet, setIsLocationSet] = useState(false);\n  const indonesiaLocation = { lat: -2.548926, lng: 118.0148634 };\n  const [workLocation, setWorkLocation] = useState(indonesiaLocation);\n  const [userLocation, setUserLocation] = useState(null);\n\n  // map state\n  const [map, setMap] = useState(null);\n\n  // checkin-out button handler\n  const checkInOutHandler = () => {\n    getUserLocation().then(res => {\n      const userLat = res.coords.latitude;\n      const userLng = res.coords.longitude;\n      const workLat = workLocation.lat;\n      const workLng = workLocation.lng;\n\n      setUserLocation({ lat: userLat, lng: userLng });\n\n      const distance = parseInt(\n        calculateDistance(userLat, userLng, workLat, workLng)\n      );\n      if (distance > 100) {\n        setError(\n          `Your distance from the office is ${distance -\n            100}m from what is allowed`\n        );\n      } else {\n        setIsCheckedIn(!isCheckedIn);\n        setIsCheckedOut(!isCheckedOut);\n      }\n    });\n  };\n\n  // get user current location\n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      return new Promise((res, rej) => {\n        navigator.geolocation.getCurrentPosition(res);\n      });\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // calcute distance between user location and work location\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const p = 0.017453292519943295; // Math.PI / 180\n    const c = Math.cos;\n    const a =\n      0.5 -\n      c((lat2 - lat1) * p) / 2 +\n      (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\n\n    return 12742000 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371000 m\n  };\n\n  useEffect(() => {\n    // fix map doesn't display completely\n    // it needs to resize the window for loading completely the map\n    window.dispatchEvent(new Event(\"resize\"));\n  }, []);\n\n  useEffect(() => {\n    getUserLocation()\n      .then(res => {\n        const { coords: { latitude: lat, longitude: lng } = {} } = res;\n\n        setWorkLocation({ lat, lng });\n        if (map) {\n          map.flyTo([lat, lng], 16);\n        }\n      })\n      .catch();\n  }, [map]);\n\n  return (\n    <>\n      <SetWorkLocation\n        isLocationSet={isLocationSet}\n        setIsLocationSet={setIsLocationSet}\n        workLocation={workLocation}\n        setWorkLocation={setWorkLocation}\n        setMap={setMap}\n        indonesiaLocation={indonesiaLocation}\n      />\n\n      <CRow>\n        <CCol xs=\"12\" sm=\"12\" md=\"8\">\n          <CCard\n            style={{\n              borderRadius: \"10px\",\n              boxShadow:\n                \"0 4px 4px 0 rgba(0, 0, 0, 0.2), 0 4px 4px 0 rgba(0, 0, 0, 0.19)\"\n            }}\n          >\n            <CCardBody className=\"text-center\">\n              <DateTime />\n              <p className=\"mt-2 text-danger\">{error}</p>\n              <CheckInOut\n                isCheckedIn={isCheckedIn}\n                isLocationSet={isLocationSet}\n                isCheckedOut={isCheckedOut}\n                checkInOutHandler={checkInOutHandler}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n\n        <CCol xs=\"12\" sm=\"12\" md=\"4\">\n          {isLocationSet ? (\n            <WorkLocation\n              workLocation={workLocation}\n              userLocation={userLocation}\n            />\n          ) : (\n            <></>\n          )}\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}