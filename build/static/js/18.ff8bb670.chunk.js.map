{"version":3,"sources":["views/register/Register.js"],"names":["Register","useState","isResponding","setIsResponding","responseMessage","setResponseMessage","responseType","setResponseType","isLoading","setIsLoading","validationSchema","Yup","shape","username","required","min","max","email","password","confirmPassword","oneOf","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","className","style","backgroundColor","md","src","width","height","onSubmit","data","AuthServices","then","res","catch","err","response","errorMessage","fontWeight","color","onClick","closeButton","htmlFor","opacity","type","message","name","border","disabled","size","to"],"mappings":"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","file":"static/js/18.ff8bb670.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\n\nimport { Link } from \"react-router-dom\";\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CRow,\n  CImg,\n  CLabel,\n  CFormGroup,\n  CFormText,\n  CAlert,\n  CSpinner,\n} from \"@coreui/react\";\n\nimport AuthServices from \"../../services/auth.service\";\n\nconst Register = () => {\n  const [isResponding, setIsResponding] = useState(false);\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const [responseType, setResponseType] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string()\n      .required(\"Username is required\")\n      .min(6, \"Username must be at least 6 characters\")\n      .max(20, \"Username must not exceed 20 characters\"),\n    email: Yup.string().required(\"Email is required\").email(\"Email is invalid\"),\n    password: Yup.string()\n      .required(\"Password is required\")\n      .min(6, \"Password must be at least 6 characters\")\n      .max(40, \"Password must not exceed 40 characters\"),\n    confirmPassword: Yup.string()\n      .required(\"Confirm Password is required\")\n      .oneOf([Yup.ref(\"password\"), null], \"Confirm Password does not match\"),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = (data) => {\n    setIsLoading(true);\n\n    const { username, email, password } = data;\n    AuthServices.register(username, email, password)\n      .then((res) => {\n        const responseMessage =\n          \"Register success. Please check your email to verify your account\";\n        reset();\n        setIsResponding(true);\n        setResponseType(\"success\");\n        setResponseMessage(responseMessage);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        setIsResponding(true);\n        setResponseType(\"danger\");\n        setResponseMessage(err.response.data.errorMessage);\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div\n      className=\"c-app c-default-layout flex-row align-items-center\"\n      style={{ backgroundColor: \"white\" }}\n    >\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <CImg\n              src={\"img/splash.png\"}\n              style={{ width: \"100%\", height: \"auto\" }}\n            />\n          </CCol>\n          <CCol md=\"4\">\n            <CCardGroup>\n              <CCard className=\"p-2\">\n                <CCardBody>\n                  <form onSubmit={handleSubmit(onSubmit)}>\n                    <h1\n                      className=\"text-center mb-3\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      Worker&apos;s Attendance\n                    </h1>\n                    {isResponding ? (\n                      <CAlert\n                        color={responseType}\n                        onClick={() => {\n                          setIsResponding(false);\n                        }}\n                        closeButton\n                      >\n                        {responseMessage}\n                      </CAlert>\n                    ) : (\n                      <></>\n                    )}\n                    <CFormGroup className=\"my-2\">\n                      <CLabel htmlFor=\"username\" style={{ opacity: \"50%\" }}>\n                        Username\n                      </CLabel>\n                      <input\n                        type=\"text\"\n                        {...register(\"username\")}\n                        className={`form-control ${\n                          errors.username ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.username ? errors.username.message : \"\"}\n                      </div>\n                    </CFormGroup>\n                    <CFormGroup className=\"my-2\">\n                      <CLabel htmlFor=\"email\" style={{ opacity: \"50%\" }}>\n                        Email\n                      </CLabel>\n                      <input\n                        name=\"email\"\n                        type=\"text\"\n                        {...register(\"email\")}\n                        className={`form-control ${\n                          errors.email ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.email ? errors.email.message : \"\"}\n                      </div>\n                    </CFormGroup>\n                    <CFormGroup className=\"my-2\">\n                      <CLabel htmlFor=\"password\" style={{ opacity: \"50%\" }}>\n                        Password\n                      </CLabel>\n                      <input\n                        name=\"password\"\n                        type=\"password\"\n                        {...register(\"password\")}\n                        className={`form-control ${\n                          errors.password ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.password ? errors.password.message : \"\"}\n                      </div>\n                    </CFormGroup>\n                    <CFormGroup className=\"my-2\">\n                      <CLabel\n                        htmlFor=\"confirm-password\"\n                        style={{ opacity: \"50%\" }}\n                      >\n                        Confirm Password\n                      </CLabel>\n                      <input\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        {...register(\"confirmPassword\")}\n                        className={`form-control ${\n                          errors.confirmPassword ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.confirmPassword\n                          ? errors.confirmPassword.message\n                          : \"\"}\n                      </div>\n                    </CFormGroup>\n                    <CRow className=\"pt-2\">\n                      <CCol>\n                        <CButton\n                          className=\"py-2\"\n                          shape=\"pill\"\n                          style={{\n                            backgroundColor: \"#6C63FF\",\n                            border: \"#6C63FF\",\n                            color: \"white\",\n                            width: \"100%\",\n                          }}\n                          type=\"submit\"\n                          disabled={isLoading}\n                        >\n                          {isLoading && (\n                            <CSpinner\n                              color=\"white\"\n                              size=\"sm\"\n                              className=\"mr-1\"\n                            />\n                          )}\n                          <span>Register</span>\n                        </CButton>\n                        <CFormText className=\"mb-2 mt-2\">\n                          Already have an account?&nbsp;\n                          <Link to=\"/login\" style={{ color: \"#6C63FF\" }}>\n                            Login\n                          </Link>\n                        </CFormText>\n                      </CCol>\n                    </CRow>\n                  </form>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Register;\n"],"sourceRoot":""}