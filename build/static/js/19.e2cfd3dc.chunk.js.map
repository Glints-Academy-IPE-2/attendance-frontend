{"version":3,"sources":["views/reset/ResetPassword.js"],"names":["Reset","query","URLSearchParams","useLocation","search","useState","isResponding","setIsResponding","responseMessage","setResponseMessage","responseType","setResponseType","isLoading","setIsLoading","validationSchema","Yup","shape","password","required","min","max","confirmPassword","oneOf","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","className","style","backgroundColor","md","onSubmit","data","email","get","token","AuthServices","resetPassword","then","res","catch","err","response","errorMessage","fontWeight","color","onClick","closeButton","htmlFor","opacity","name","type","message","border","width","disabled","size","to"],"mappings":"sRAyLeA,UA7JD,WACZ,IAAIC,EAJG,IAAIC,gBAAgBC,cAAcC,QAMzC,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EAAmBC,MAAaC,MAAM,CAC1CC,SAAUF,MACPG,SAAS,wBACTC,IAAI,EAAG,0CACPC,IAAI,GAAI,0CACXC,gBAAiBN,MACdG,SAAS,gCACTI,MAAM,CAACP,IAAQ,YAAa,MAAO,qCAGxC,EAKIQ,YAAQ,CACVC,SAAUC,YAAYX,KALtBY,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OA2Bf,OACE,qBACEE,UAAU,qDACVC,MAAO,CAAEC,gBAAiB,SAF5B,SAIE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMF,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMG,GAAG,IAAT,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOH,UAAU,MAAjB,SACE,cAAC,IAAD,UACE,uBAAMI,SAAUR,GAjCf,SAACS,GAChBvB,GAAa,GAEb,IAAMwB,EAAQpC,EAAMqC,IAAI,SAClBC,EAAQtC,EAAMqC,IAAI,SAExBE,IAAaC,cAAcJ,EAAOE,EAAOH,EAAKnB,UAC3CyB,MAAK,SAACC,GACLf,IACArB,GAAgB,GAChBI,EAAgB,WAChBF,EAAmB,8BACnBI,GAAa,MAEd+B,OAAM,SAACC,GACNtC,GAAgB,GAChBI,EAAgB,UAChBF,EAAmBoC,EAAIC,SAASV,KAAKW,cACrClC,GAAa,SAeH,UACE,oBACEkB,UAAU,mBACVC,MAAO,CAAEgB,WAAY,QAFvB,4BAMC1C,GACC,cAAC,IAAD,CACE2C,MAAOvC,EACPwC,QAAS,WACP3C,GAAgB,IAElB4C,aAAW,EALb,SAOG3C,IAGL,eAAC,IAAD,CAAYuB,UAAU,OAAtB,UACE,cAAC,IAAD,CAAQqB,QAAQ,WAAWpB,MAAO,CAAEqB,QAAS,OAA7C,0BAGA,+CACEC,KAAK,WACLC,KAAK,YACD7B,EAAS,aAHf,IAIEK,UAAS,uBACPF,EAAOZ,SAAW,aAAe,OAGrC,qBAAKc,UAAU,mBAAf,SACGF,EAAOZ,SAAWY,EAAOZ,SAASuC,QAAU,QAGjD,eAAC,IAAD,CAAYzB,UAAU,OAAtB,UACE,cAAC,IAAD,CACEqB,QAAQ,mBACRpB,MAAO,CAAEqB,QAAS,OAFpB,kCAMA,+CACEC,KAAK,kBACLC,KAAK,YACD7B,EAAS,oBAHf,IAIEK,UAAS,uBACPF,EAAOR,gBAAkB,aAAe,OAG5C,qBAAKU,UAAU,mBAAf,SACGF,EAAOR,gBACJQ,EAAOR,gBAAgBmC,QACvB,QAGR,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CACEzB,UAAU,YACVf,MAAM,OACNgB,MAAO,CACLC,gBAAiB,UACjBwB,OAAQ,UACRR,MAAO,QACPS,MAAO,QAETH,KAAK,SACLI,SAAU/C,EAVZ,UAYGA,GACC,cAAC,IAAD,CACEqC,MAAM,QACNW,KAAK,KACL7B,UAAU,SAGd,4CAEF,eAAC,IAAD,CAAWA,UAAU,wBAArB,wBAEE,cAAC,IAAD,CAAM8B,GAAG,SAAS7B,MAAO,CAAEiB,MAAO,WAAlC","file":"static/js/19.e2cfd3dc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CRow,\n  CLabel,\n  CFormGroup,\n  CFormText,\n  CSpinner,\n  CAlert,\n} from \"@coreui/react\";\n\nimport { useLocation, Link } from \"react-router-dom\";\n\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\n\nimport AuthServices from \"../../services/auth.service\";\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst Reset = () => {\n  let query = useQuery();\n\n  const [isResponding, setIsResponding] = useState(false);\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const [responseType, setResponseType] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const validationSchema = Yup.object().shape({\n    password: Yup.string()\n      .required(\"Password is required\")\n      .min(6, \"Password must be at least 6 characters\")\n      .max(40, \"Password must not exceed 40 characters\"),\n    confirmPassword: Yup.string()\n      .required(\"Confirm Password is required\")\n      .oneOf([Yup.ref(\"password\"), null], \"Confirm Password does not match\"),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = (data) => {\n    setIsLoading(true);\n\n    const email = query.get(\"email\");\n    const token = query.get(\"token\");\n\n    AuthServices.resetPassword(email, token, data.password)\n      .then((res) => {\n        reset();\n        setIsResponding(true);\n        setResponseType(\"success\");\n        setResponseMessage(\"Reset password successfull\");\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        setIsResponding(true);\n        setResponseType(\"danger\");\n        setResponseMessage(err.response.data.errorMessage);\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div\n      className=\"c-app c-default-layout flex-row align-items-center\"\n      style={{ backgroundColor: \"white\" }}\n    >\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <form onSubmit={handleSubmit(onSubmit)}>\n                    <h1\n                      className=\"text-center mb-4\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      Reset Password\n                    </h1>\n                    {isResponding && (\n                      <CAlert\n                        color={responseType}\n                        onClick={() => {\n                          setIsResponding(false);\n                        }}\n                        closeButton\n                      >\n                        {responseMessage}\n                      </CAlert>\n                    )}\n                    <CFormGroup className=\"my-2\">\n                      <CLabel htmlFor=\"password\" style={{ opacity: \"50%\" }}>\n                        New Password\n                      </CLabel>\n                      <input\n                        name=\"password\"\n                        type=\"password\"\n                        {...register(\"password\")}\n                        className={`form-control ${\n                          errors.password ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.password ? errors.password.message : \"\"}\n                      </div>\n                    </CFormGroup>\n                    <CFormGroup className=\"my-2\">\n                      <CLabel\n                        htmlFor=\"confirm-password\"\n                        style={{ opacity: \"50%\" }}\n                      >\n                        Confirm New Password\n                      </CLabel>\n                      <input\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        {...register(\"confirmPassword\")}\n                        className={`form-control ${\n                          errors.confirmPassword ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.confirmPassword\n                          ? errors.confirmPassword.message\n                          : \"\"}\n                      </div>\n                    </CFormGroup>\n                    <CRow>\n                      <CCol>\n                        <CButton\n                          className=\"py-2 mt-2\"\n                          shape=\"pill\"\n                          style={{\n                            backgroundColor: \"#6C63FF\",\n                            border: \"#6C63FF\",\n                            color: \"white\",\n                            width: \"100%\",\n                          }}\n                          type=\"submit\"\n                          disabled={isLoading}\n                        >\n                          {isLoading && (\n                            <CSpinner\n                              color=\"white\"\n                              size=\"sm\"\n                              className=\"mr-1\"\n                            />\n                          )}\n                          <span>Reset</span>\n                        </CButton>\n                        <CFormText className=\"mb-2 mt-2 text-center\">\n                          Back to&nbsp;\n                          <Link to=\"/login\" style={{ color: \"#6C63FF\" }}>\n                            Login\n                          </Link>\n                        </CFormText>\n                      </CCol>\n                    </CRow>\n                  </form>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Reset;\n"],"sourceRoot":""}