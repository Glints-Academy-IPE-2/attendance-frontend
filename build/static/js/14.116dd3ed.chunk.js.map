{"version":3,"sources":["views/login/Login.js"],"names":["Login","token","URLSearchParams","useLocation","search","get","useState","isErrorResponse","setIsErrorResponse","errorResponseMessage","setErrorResponseMessage","isLoading","setIsLoading","history","useHistory","validationSchema","Yup","shape","email","required","password","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","loginHandler","data","element","AuthServices","login","then","push","window","location","reload","catch","err","target","value","response","errorMessage","className","style","backgroundColor","md","src","width","height","onSubmit","verifyUser","fontWeight","color","onClick","closeButton","htmlFor","opacity","name","type","message","to","border","disabled","size"],"mappings":"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","file":"static/js/14.116dd3ed.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\n\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CRow,\n  CImg,\n  CLabel,\n  CFormGroup,\n  CFormText,\n  CAlert,\n  CSpinner\n} from \"@coreui/react\";\n\nimport AuthServices from \"../../services/auth.service\";\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst Login = () => {\n  let query = useQuery();\n  const token = query.get(\"token\");\n\n  const [isErrorResponse, setIsErrorResponse] = useState(false);\n  const [errorResponseMessage, setErrorResponseMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const history = useHistory();\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .required(\"Email is required\")\n      .email(\"Email is invalid\"),\n    password: Yup.string().required(\"Password is required\")\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  const loginHandler = (data, element) => {\n    const { email, password } = data;\n    AuthServices.login(email, password)\n      .then(() => {\n        setIsLoading(false);\n        history.push(\"/\");\n        window.location.reload();\n      })\n      .catch(err => {\n        // empty password field\n        element.target[1].value = \"\";\n        setIsErrorResponse(true);\n        setErrorResponseMessage(err.response.data.errorMessage);\n        setIsLoading(false);\n      });\n  };\n\n  const onSubmit = (data, element) => {\n    setIsLoading(true);\n    if (token) {\n      AuthServices.verifyUser(token)\n        .then(() => {\n          loginHandler(data, element);\n        })\n        .catch(err => {\n          setIsErrorResponse(true);\n          setErrorResponseMessage(err.response.data.errorMessage);\n          setIsLoading(false);\n        });\n    } else {\n      loginHandler(data, element);\n    }\n  };\n\n  return (\n    <div\n      className=\"c-app c-default-layout flex-row align-items-center\"\n      style={{ backgroundColor: \"white\" }}\n    >\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <CImg\n              src={\"img/splash.png\"}\n              style={{ width: \"100%\", height: \"auto\" }}\n            />\n          </CCol>\n          <CCol md=\"4\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <form onSubmit={handleSubmit(onSubmit)}>\n                    <h1 className=\"text-center\" style={{ fontWeight: \"bold\" }}>\n                      Worker&apos;s Attendance\n                    </h1>\n                    {isErrorResponse ? (\n                      <CAlert\n                        color=\"danger\"\n                        onClick={() => {\n                          setIsErrorResponse(false);\n                        }}\n                        closeButton\n                      >\n                        {errorResponseMessage}\n                      </CAlert>\n                    ) : (\n                      <></>\n                    )}\n                    <CFormGroup className=\"my-4\">\n                      <CLabel htmlFor=\"email\" style={{ opacity: \"50%\" }}>\n                        Email\n                      </CLabel>\n                      <input\n                        name=\"email\"\n                        type=\"text\"\n                        {...register(\"email\")}\n                        className={`form-control ${\n                          errors.email ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.email ? errors.email.message : \"\"}\n                      </div>\n                    </CFormGroup>\n                    <CFormGroup className=\"my-4\">\n                      <CLabel htmlFor=\"password\" style={{ opacity: \"50%\" }}>\n                        Password\n                      </CLabel>\n                      <input\n                        name=\"password\"\n                        type=\"password\"\n                        {...register(\"password\")}\n                        className={`form-control ${\n                          errors.password ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.password ? errors.password.message : \"\"}\n                      </div>\n                      <div className=\"text-right mt-1\">\n                        <Link to=\"/forgot\" style={{ color: \"#6C63FF\" }}>\n                          Forgot password?\n                        </Link>\n                      </div>\n                    </CFormGroup>\n                    <CRow>\n                      <CCol>\n                        <CButton\n                          className=\"py-2\"\n                          shape=\"pill\"\n                          style={{\n                            backgroundColor: \"#6C63FF\",\n                            border: \"#6C63FF\",\n                            color: \"white\",\n                            width: \"100%\"\n                          }}\n                          type=\"submit\"\n                          disabled={isLoading}\n                        >\n                          {isLoading && (\n                            <CSpinner\n                              color=\"white\"\n                              size=\"sm\"\n                              className=\"mr-1\"\n                            />\n                          )}\n                          <span>Login</span>\n                        </CButton>\n                        <CFormText className=\"mb-2 mt-2\">\n                          Need an account?&nbsp;\n                          <Link to=\"/register\" style={{ color: \"#6C63FF\" }}>\n                            Register\n                          </Link>\n                        </CFormText>\n                      </CCol>\n                    </CRow>\n                  </form>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}