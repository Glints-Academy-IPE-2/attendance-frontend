{"version":3,"sources":["views/forgot/ForgotPassword.js"],"names":["Forgot","useState","responseType","setResponseType","responseMessage","setResponseMessage","isLoading","setIsLoading","validationSchema","Yup","shape","email","required","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","className","style","backgroundColor","md","onSubmit","data","AuthServices","forgotPassword","then","catch","err","fontWeight","color","closeButton","htmlFor","opacity","name","type","message","border","width","disabled","size","to"],"mappings":"8QA+IeA,UAtHA,WACb,MAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8CF,mBAAS,MAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EAAmBC,MAAaC,MAAM,CAC1CC,MAAOF,MAAaG,SAAS,qBAAqBD,MAAM,sBAG1D,EAKIE,YAAQ,CACVC,SAAUC,YAAYP,KALtBQ,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAwBf,OACE,qBACEE,UAAU,qDACVC,MAAO,CAAEC,gBAAiB,SAF5B,SAIE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMF,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMG,GAAG,IAAT,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOH,UAAU,MAAjB,SACE,cAAC,IAAD,UACE,uBAAMI,SAAUR,GA9Bf,SAACS,GAChBnB,GAAa,GACb,IAAQI,EAAUe,EAAVf,MACRgB,IAAaC,eAAejB,GACzBkB,MAAK,WACJX,IACAX,GAAa,GACbJ,EAAgB,WAChBE,EACE,sEAGHyB,OAAM,SAACC,GACNxB,GAAa,GACbJ,EAAgB,UAChBE,EAAmB,+BAeT,UACE,oBACEgB,UAAU,mBACVC,MAAO,CAAEU,WAAY,QAFvB,6BAMC5B,GACC,cAAC,IAAD,CAAQ6B,MAAO/B,EAAcgC,aAAW,EAAxC,SACG9B,IAGL,eAAC,IAAD,CAAYiB,UAAU,OAAtB,UACE,cAAC,IAAD,CAAQc,QAAQ,QAAQb,MAAO,CAAEc,QAAS,OAA1C,mBAGA,+CACEC,KAAK,QACLC,KAAK,QACDtB,EAAS,UAHf,IAIEK,UAAS,uBACPF,EAAOR,MAAQ,aAAe,OAGlC,qBAAKU,UAAU,mBAAf,SACGF,EAAOR,MAAQQ,EAAOR,MAAM4B,QAAU,QAG3C,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CACElB,UAAU,OACVX,MAAM,OACNY,MAAO,CACLC,gBAAiB,UACjBiB,OAAQ,UACRP,MAAO,QACPQ,MAAO,QAETH,KAAK,SACLI,SAAUpC,EAVZ,UAYGA,GACC,cAAC,IAAD,CACE2B,MAAM,QACNU,KAAK,KACLtB,UAAU,SAGd,2CAEF,eAAC,IAAD,CAAWA,UAAU,wBAArB,wBAEE,cAAC,IAAD,CAAMuB,GAAG,SAAStB,MAAO,CAAEW,MAAO,WAAlC","file":"static/js/13.628e5d50.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\n\nimport { Link } from \"react-router-dom\";\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CRow,\n  CLabel,\n  CFormGroup,\n  CFormText,\n  CAlert,\n  CSpinner,\n} from \"@coreui/react\";\n\nimport AuthServices from \"../../services/auth.service\";\n\nconst Forgot = () => {\n  const [responseType, setResponseType] = useState(null);\n  const [responseMessage, setResponseMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().required(\"Email is required\").email(\"Email is invalid\"),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = (data) => {\n    setIsLoading(true);\n    const { email } = data;\n    AuthServices.forgotPassword(email)\n      .then(() => {\n        reset();\n        setIsLoading(false);\n        setResponseType(\"success\");\n        setResponseMessage(\n          \"Reset password confirmation has been sent to your email address\"\n        );\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setResponseType(\"danger\");\n        setResponseMessage(\"An error has occurred\");\n      });\n  };\n\n  return (\n    <div\n      className=\"c-app c-default-layout flex-row align-items-center\"\n      style={{ backgroundColor: \"white\" }}\n    >\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <form onSubmit={handleSubmit(onSubmit)}>\n                    <h1\n                      className=\"text-center mb-4\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      Forgot Password\n                    </h1>\n                    {responseMessage && (\n                      <CAlert color={responseType} closeButton>\n                        {responseMessage}\n                      </CAlert>\n                    )}\n                    <CFormGroup className=\"my-4\">\n                      <CLabel htmlFor=\"email\" style={{ opacity: \"50%\" }}>\n                        Email\n                      </CLabel>\n                      <input\n                        name=\"email\"\n                        type=\"text\"\n                        {...register(\"email\")}\n                        className={`form-control ${\n                          errors.email ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.email ? errors.email.message : \"\"}\n                      </div>\n                    </CFormGroup>\n                    <CRow>\n                      <CCol>\n                        <CButton\n                          className=\"py-2\"\n                          shape=\"pill\"\n                          style={{\n                            backgroundColor: \"#6C63FF\",\n                            border: \"#6C63FF\",\n                            color: \"white\",\n                            width: \"100%\",\n                          }}\n                          type=\"submit\"\n                          disabled={isLoading}\n                        >\n                          {isLoading && (\n                            <CSpinner\n                              color=\"white\"\n                              size=\"sm\"\n                              className=\"mr-1\"\n                            />\n                          )}\n                          <span>Send</span>\n                        </CButton>\n                        <CFormText className=\"mb-2 mt-2 text-center\">\n                          Back to&nbsp;\n                          <Link to=\"/login\" style={{ color: \"#6C63FF\" }}>\n                            Login\n                          </Link>\n                        </CFormText>\n                      </CCol>\n                    </CRow>\n                  </form>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Forgot;\n"],"sourceRoot":""}